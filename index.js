require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const bot = new TelegramBot(process.env.CAREERS_EF_TOKEN, { polling: true });
const keyboards = require("./keyboards");
const data = require("sqlite-sync");
data.connect("database/careers_ef.db");

var question = {};
var feedback = {};
var answer = {};

bot.onText(/\/start/, (msg) => {
  if (
    data.run("select count (*) as cnt from users where user_id = ?", [
      msg.from.id,
    ])[0].cnt == 0
  ) {
    data.insert(
      "users",
      {
        user_id: msg.from.id,
        username: msg.from.username,
        first_name: msg.from.first_name,
      },
      (callback) => {
        if (callback.error) {
          bot.sendMessage(msg.chat.id, "–ü–æ–º–∏–ª–∫–∞");
        } else {
          bot.sendMessage(
            msg.from.id,
            "–ü—Ä–∏–≤—ñ—Ç, –º–æ–∂–µ—à –∑–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –∑–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫ –ø—Ä–æ –∫–∞–Ω–∞–ª –∞–±–æ –±–æ—Ç–∞. –ù–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —Ç–∏ –º–æ–∂–µ—à –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å,<b> –≤—ñ–¥–≥—É–∫ –∑–∞–ª–∏—à–∏—Ç—å—Å—è –±–µ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ)</b>\n–Ø–∫—â–æ —Ç–∏ HR, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –æ—Å—Ç–∞–Ω–Ω—å–æ—é –∫–Ω–æ–ø–∫–æ—é üòè",
            keyboards.start
          );
          return;
        }
      }
    );
  }
  bot.sendMessage(
    msg.from.id,
    "–ú–æ–∂–µ—à –∑–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –∑–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫ –ø—Ä–æ –∫–∞–Ω–∞–ª –∞–±–æ –±–æ—Ç–∞. –ù–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —Ç–∏ –º–æ–∂–µ—à –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å,<b> –≤—ñ–¥–≥—É–∫ –∑–∞–ª–∏—à–∏—Ç—å—Å—è –±–µ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ)</b>",
    keyboards.start
  );
});

bot.onText(/\/admin ([^;'\"]+)/, (msg, match) => {
  if (match[1] === process.env.PASSWORD) {
    data.insert(
      "admins",
      {
        chat_id: parseInt(msg.chat.id),
      },
      (callback) => {
        if (callback.error) {
          bot.sendMessage(
            msg.chat.id,
            "–ß–∞—Ç –¥–æ–¥–∞–Ω–æ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä. –¢–µ–ø–µ—Ä —Å—é–¥–∏ –±—É–¥—É—Ç—å –Ω–∞–¥—Å–∏–ª–∞—Ç–∏—Å—å –≤—ñ–¥–≥—É–∫–∏ —Ç–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è"
          );
        } else {
          bot.sendMessage(
            msg.chat.id,
            "–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Ç—É. –ß–∞—Ç –∞–±–æ –≤–∂–µ –¥–æ–¥–∞–Ω–æ, –∞–±–æ –≤—ñ–Ω –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —á–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É"
          );
        }
      }
    );
  } else {
    bot.sendMessage(msg.chat.id, "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å");
  }
});

bot.on("message", (msg) => {
  if (msg.from.id in feedback) {
    sendFeedback(msg);
  }
  if (msg.from.id in question) {
    sendQuestion(msg);
  }
  if (msg.chat.id in answer) {
    sendAnswer(msg);
  }
});

bot.on("callback_query", (query) => {
  console.log(query.data);
  if (query.data === "question") {
    question[query.message.chat.id] = { message_id: false };
    bot.sendMessage(
      query.message.chat.id,
      "–ù–∞–¥—ñ—à–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è –≤ —á–∞—Ç, —Ç–∞ –Ω–µ–≤–¥–æ–≤–∑—ñ –æ—Ç—Ä–∏–º–∞—î—à –≤—ñ–¥–ø–æ–≤—ñ–¥—å"
    );
    return;
  }
  if (query.data === "feedback") {
    feedback[query.message.chat.id] = {};
    bot.sendMessage(
      query.message.chat.id,
      "–ë—É–¥–µ–º–æ —Ä–∞–¥—ñ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ñ–π –∫—Ä–∏—Ç–∏—Ü—ñ —Ç–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º –≤—ñ–¥–≥—É–∫–∞–º! –ù–∞–ø–∏—à–∏ —Å–≤–æ—î –≤—Ä–∞–∂–µ–Ω–Ω—è:"
    );
    return;
  }

  if (query.data.indexOf(".") != -1) {
    var before_dot = query.data.slice(0, query.data.indexOf("."));
    var after_dot = query.data.slice(
      query.data.indexOf(".") + 1,
      query.data.length
    );
    bot.sendMessage(query.message.chat.id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", {
      reply_markup: {
        inline_keyboard: [[{ text: "–°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data: "cancel" }]],
      },
    });
    answer[query.message.chat.id] = {
      user_id: before_dot,
      message_id: after_dot,
    };
  }
});

function sendFeedback(msg) {
  const admins = data.run("select * from admins");
  admins.forEach((element) => {
    bot.sendMessage(
      element.chat_id,
      "<b>–í—ñ–¥–≥—É–∫ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @" + msg.from.username + "</b>\n\n" + msg.text,
      { parse_mode: "HTML" }
    );
  });
  delete feedback[msg.from.id];
}
function sendQuestion(msg) {
  console.log(msg.message_id);
  const admins = data.run("select * from admins");
  admins.forEach((element) => {
    bot.sendMessage(
      element.chat_id,
      "<b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @" +
        msg.from.username +
        "</b>\n\n" +
        msg.text,
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏",
                callback_data: msg.chat.id + "." + msg.message_id,
              },
            ],
          ],
        },
      }
    );
  });
  delete question[msg.from.id];
  bot.sendMessage(
    msg.chat.id,
    "–ó–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏!",
    keyboards.start
  );
}
function sendAnswer(msg) {
  bot.sendMessage(answer[msg.chat.id].user_id, msg.text, {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: "–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏",
            callback_data: msg.chat.id + "." + msg.message_id,
          },
        ],
      ],
    },
    reply_to_message_id: answer[msg.from.id].message_id,
  });
  bot.sendMessage(msg.chat.id, "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ");
  delete answer[msg.chat.id];
}
